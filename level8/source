
// WARNING: Variable defined which should be unmapped: var_bp_8h

undefined main(void)
{
    char cVar1;
    int32_t iVar2;
    uint32_t uVar3;
    uint8_t *puVar4;
    char *pcVar5;
    uint8_t *puVar6;
    bool bVar7;
    undefined uVar8;
    undefined uVar9;
    bool bVar10;
    undefined uVar11;
    uint8_t uVar12;
    uint8_t auStack144 [5];
    char acStack139 [2];
    undefined auStack137 [125];
    int32_t var_bp_8h;
    
    uVar12 = 0;
    do {
        printf("%p, %p \n", _auth, _service); 
        // print les adresses des valeurs correspondant aux variables auth et service
        iVar2 = fgets(auStack144, 0x80, _stdin);
            // 0x080485ae < +74 > : call 0x8048440 < fgets @plt >
        bVar7 = false;
        bVar10 = iVar2 == 0;
        if (bVar10)
            // 0x080485b3 < +79 > : test eax, eax 
        {
        // if no stdin input, jump to nop and restart the loop
            return 0;
            // 0x080485b5 < +81 > : je 0x804872c < main + 456 >
        }
            // 0x080485bb < +87 > : lea eax, [esp + 0x20]
            // 0x080485bf < +91 > : mov edx, eax
            // 0x080485c1 < +93 > : mov eax, 0x8048819
                                                                                                                                                                                                                                                                                                                    puVar4 = auStack144;
        iVar2 = 5;
            // 0x080485c6 <+98>:	mov    ecx,0x5
        // The uint_t* is the pointer to the memory in which the string "auth " is stored
        puVar6 = (uint8_t *)"auth ";
            // 0x080485cb <+103>:	mov    esi,edx
            // 0x080485cd <+105>:	mov    edi,eax
            // 0x080485cf <+107>:	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
        // Compare l octet adressé par DS:SI et celui adressé par ES:DI. Si DF = 0, alors SI et DI sont ensuite incrémentés, sinon ils sont décrémentés.
        do {
            // 0x080485d1 <+109>:	seta   dl
            // 0x080485d4 <+112>:	setb   al
            // 0x080485d7 <+115>:	mov    ecx,edx
            // 0x080485d9 <+117>:	sub    cl,al
            // 0x080485db <+119>:	mov    eax,ecx

            if (iVar2 == 0) break;
            iVar2 = iVar2 + -1;
            bVar7 = *puVar4 < *puVar6;
            bVar10  = *puVar4 == *puVar6;
            // if puVar4 = 'auth ' (5 firsts characters of stdin because uint8_t auStack144 [5])
            puVar4 = puVar4 + (uint32_t)uVar12 * -2 + 1;
            puVar6 = puVar6 + (uint32_t)uVar12 * -2 + 1;

        } while (bVar10);
        // leave loop and continue
        uVar8 = 0;
        uVar11 = (!bVar7 && !bVar10) == bVar7;
           // 0x080485dd <+121>:	movsx  eax,al
        // Déplace le contenu signé d un registre de 8 bits dans un registre de 16 bits, ou bien déplace le contenu signé d un registre de 16 bits dans un registre de 32 bits.
        // Si Source est négatif, la partie haute de Destination sera remplie de 1 binaires, sinon elle sera remplie de 0.

        // al = (eax < 0) ? 1 : 0;
        // eax = (int32_t)al;
        // if (eax == 0)
        if ((bool)uVar11)
            {
                // 0x080485e0 <+124>:	test   eax,eax
                // 0x080485e2 <+126>:	jne    0x8048642 <main+222>
                // 0x080485e4 <+128>:	mov    DWORD PTR [esp],0x4
                // 0x080485eb <+135>:	call   0x8048470 <malloc@plt>
                _auth = (undefined4 *)malloc(4);
            // It reserves memory space of specified size and returns the null pointer pointing to the memory location.
                // 0x080485f0 < +140 > : mov ds : 0x8049aac, eax
                // 0x080485f5 < +145 > : mov eax, ds : 0x8049aac
                // 0x080485fa < +150 > : mov DWORD PTR[eax], 0x0
                *_auth = 0;
                // 0x08048600 < +156 > : lea eax, [esp + 0x20]
                // 0x08048604 < +160 > : add eax, 0x5
                // 0x08048607 < +163 > : mov DWORD PTR[esp + 0x1c], 0xffffffff 
                // 0x0804860f < +171 > : mov edx, eax 
                // 0x08048611 < +173 > : mov eax, 0x0 
                uVar3 = 0xffffffff;
                // 0x08048616 < +178 > : mov ecx, DWORD PTR[esp + 0x1c] 
                // 0x0804861a < +182 > : mov edi, edx 
                pcVar5 = acStack139;
                // 0x0804861c < +184 > : repnz scas al, BYTE PTR es : [edi] 
                do
                {
                // 0x0804861e < +186 > : mov eax, ecx 
                // 0x08048620 < +188 > : not eax
                    if (uVar3 == 0)
                        break;
                // 0x08048622 < +190 > : sub eax, 0x1 
                    uVar3 = uVar3 - 1;
                    cVar1 = *pcVar5;
                    pcVar5 = pcVar5 + (uint32_t)uVar12 * -2 + 1;
                } while (cVar1 != '\0');

                uVar8 = uVar3 < 0x1e;
                uVar11 = uVar3 == 0x1e;

                // 0x08048625 < +193 > : cmp eax, 0x1e 
                // 0x08048628 < +196 > : ja 0x8048642 < main + 222 > 
                if (uVar3 < 0x1f)
                {
                // 0x0804862a < +198 > : lea eax, [esp + 0x20] 
                // 0x0804862e < +202 > : lea edx, [eax + 0x5] 
                // 0x08048631 < +205 > : mov eax, ds : 0x8049aac 
                // 0x08048636 < +210 > : mov DWORD PTR[esp + 0x4], edx 
                // 0x0804863a < +214 > : mov DWORD PTR[esp], eax 
                // 0x0804863d < +217 > : call 0x8048460 < strcpy @plt > 
                // 0x08048642 < +222 > : lea eax, [esp + 0x20] 
                // 0x08048646 < +226 > : mov edx, eax 
                // 0x08048648 < +228 > : mov eax, 0x804881f 
                    strcpy(_auth, acStack139);
                    // copier le contenu d une chaîne de caractères dans une autre dest/src
                }
            }
                // 0x0804864d < +233 > : mov ecx, 0x5 
            iVar2 = 5;
                // 0x08048652 < +238 > : mov esi, edx 
                // 0x08048654 < +240 > : mov edi, eax 
            puVar4 = auStack144;
            puVar6 = (uint8_t *)"reset";
                // 0x08048656 < +242 > : repz cmps BYTE PTR ds : [esi], BYTE PTR es : [edi]
            do
            {
                if (iVar2 == 0) break;
                
                // 0x08048658 < +244 > : seta dl 
                // 0x0804865b < +247 > : setb al 
                // 0x0804865e < +250 > : mov ecx, edx 
                // 0x08048660 < +252 > : sub cl, al 
                // 0x08048662 < +254 > : mov eax, ecx 

                iVar2 = iVar2 + -1;
                uVar8 = *puVar4 < *puVar6;
                uVar11 = *puVar4 == *puVar6;
                puVar4 = puVar4 + (uint32_t)uVar12 * -2 + 1;
                puVar6 = puVar6 + (uint32_t)uVar12 * -2 + 1;
            } while ((bool)uVar11);

            uVar9 = 0;

                // 0x08048664 < +256 > : movsx eax, al 
            uVar8 = (!(bool)uVar8 && !(bool)uVar11) == (bool)uVar8;
            // al = (eax < 0x1e) ? 1 : 0;
            // eax = ecx;
            // eax = (int32_t)al;

            // 0x08048667 < +259 > : test eax, eax
            // 0x08048669 < +261 > : jne 0x8048678 < main + 276 > 
            if ((bool)uVar8)
            {
            // if (eax == 0)
            // {
            //     eax = auth;
            // free(eax);

                // 0x0804866b < +263 > : mov eax, ds : 0x8049aac 
                // 0x08048670 < +268 > : mov DWORD PTR[esp], eax 
                // 0x08048673 < +271 > : call 0x8048420 < free @plt > 
                // 0x08048678 < +276 > : lea eax, [esp + 0x20] 
                // 0x0804867c < +280 > : mov edx, eax 
                // 0x0804867e < +282 > : mov eax, 0x8048825 
                free(_auth);
            }
                // 0x08048683 < +287 > : mov ecx, 0x6 
                // 0x08048688 < +292 > : mov esi, edx 
                // 0x0804868a < +294 > : mov edi, eax
            iVar2 = 6;
            puVar4 = auStack144;
            puVar6 = (uint8_t *)"service";

                // 0x0804868c < +296 > : repz cmps BYTE PTR ds : [esi], BYTE PTR es : [edi]
                // 0x0804868e < +298 > : seta dl
                // 0x08048691 < +301 > : setb al
                // 0x08048694 < +304 > : mov ecx, edx
                // 0x08048696 < +306 > : sub cl, al
                // 0x08048698 < +308 > : mov eax, ecx

                do
                {
                    if (iVar2 == 0)
                        break;
                    iVar2 = iVar2 + -1;
                    uVar9 = *puVar4 < *puVar6;
                    uVar8 = *puVar4 == *puVar6;
                    puVar4 = puVar4 + (uint32_t)uVar12 * -2 + 1;
                    puVar6 = puVar6 + (uint32_t)uVar12 * -2 + 1;
                } while ((bool)uVar8);
                uVar11 = 0;

            //    al = (eax < 0) ? 1 : 0;
            //     ecx = edx;
            //     eax = ecx;
            //     eax = (int32_t) al;
                // 0x0804869a < +310 > : movsx eax, al
                uVar8 = (!(bool)uVar9 && !(bool)uVar8) == (bool)uVar9;

                // 0x0804869d < +313 > : test eax, eax
                // 0x0804869f < +315 > : jne 0x80486b5 < main + 337 >
                if ((bool)uVar8)
                    {
            //     if (eax == 0) {
            //         eax = &src;
            //         eax += 7;
            //         eax = strdup (eax);
                // 0x080486a1 < +317 > : lea eax, [esp + 0x20]
                // 0x080486a5 < +321 > : add eax, 0x7
                // 0x080486a8 < +324 > : mov DWORD PTR[esp], eax
                // 0x080486ab < +327 > : call 0x8048430 < strdup @plt >
                // 0x080486b0 < +332 > : mov ds : 0x8049ab0, eax
                uVar11 = (uint8_t *)0xfffffff8 < auStack144;
                uVar8 = auStack137 == (undefined *)0x0;
                _service = strdup(auStack137);
                // La fonction strdup() renvoie un pointeur sur une nouvelle chaîne de caractères
            }
                // 0x080486b5 < +337 > : lea eax, [esp + 0x20]
                // 0x080486b9 < +341 > : mov edx, eax
                // 0x080486bb < +343 > : mov eax, 0x804882d
                // 0x080486c0 < +348 > : mov ecx, 0x5
                // 0x080486c5 < +353 > : mov esi, edx
                // 0x080486c7 < +355 > : mov edi, eax
                iVar2 = 5;
                puVar4 = auStack144;
                puVar6 = (uint8_t *)"login";
                // 0x080486c9 < +357 > : repz cmps BYTE PTR ds : [esi], BYTE PTR es : [edi]
                do
                {
                // 0x080486cb < +359 > : seta dl 
                // 0x080486ce < +362 > : setb al 
                // 0x080486d1 < +365 > : mov ecx, edx 
                // 0x080486d3 < +367 > : sub cl, al 
                // 0x080486d5 < +369 > : mov eax, ecx 
                    if (iVar2 == 0)
                        break;
                    iVar2 = iVar2 + -1;
                    uVar11 = *puVar4 < *puVar6;
                    uVar8 = *puVar4 == *puVar6;
                    puVar4 = puVar4 + (uint32_t)uVar12 * -2 + 1;
                    puVar6 = puVar6 + (uint32_t)uVar12 * -2 + 1;
                } while ((bool)uVar8);

            // al = (eax < 0) ? 1 : 0;
            // ecx = edx;
            // eax = ecx;
            // eax = (int32_t)al;

                // 0x080486d7 < +371 > : movsx eax, al
                // 0x080486da < +374 > : test eax, eax
                // 0x080486dc < +376 > : jne 0x8048574 < main + 16 >
        if ((!(bool)uVar11 && !(bool)uVar8) == (bool)uVar11)
        {
            // eax = auth;
            // eax = *((eax + 0x20));
            // if (eax != 0)

                // 0x080486e2 < +382 > : mov eax, ds : 0x8049aac
                // 0x080486e7 < +387 > : mov eax, DWORD PTR[eax + 0x20]
                // 0x080486ea < +390 > : test eax, eax
                // 0x080486ec < +392 > : je 0x80486ff < main + 411 >
                // 0x080486ee < +394 > : mov DWORD PTR[esp], 0x8048833
                // 0x080486f5 < +401 > : call 0x8048480 < system @plt >
                // 0x080486fa < +406 > : jmp 0x8048574 < main + 16 >
                // 0x080486ff < +411 > : mov eax, ds : 0x8049aa0
                // 0x08048704 < +416 > : mov edx, eax
                // 0x08048706 < +418 > : mov eax, 0x804883b
                // 0x0804870b < +423 > : mov DWORD PTR[esp + 0xc], edx
                // 0x0804870f < +427 > : mov DWORD PTR[esp + 0x8], 0xa
                // 0x08048717 < +435 > : mov DWORD PTR[esp + 0x4], 0x1
                // 0x0804871f < +443 > : mov DWORD PTR[esp], eax
                // 0x08048722 < +446 > : call 0x8048450 < fwrite @plt >
                // 0x08048727 < +451 > : jmp 0x8048574 < main + 16 >
            if (_auth[8] == 0)
            {
                fwrite("Password:\n", 1, 10, _stdout);
            }
            else
            {
                system("/bin/sh");
            }
        }
    }
    while (true)
        ;
    // 0x0804872c < +456 > : nop
    // 0x0804872d < +457 > : mov eax, 0x0
    // 0x08048732 < +462 > : lea esp, [ebp - 0x8]
    // 0x08048735 < +465 > : pop esi
    // 0x08048736 < +466 > : pop edi
    // 0x08048737 < +467 > : pop ebp
    // 0x08048738 < +468 > : ret
}
